# syntax=docker/dockerfile:1-labs
ARG OPNSENSE_SERIES
FROM koichirok/docker-opnsense:${OPNSENSE_SERIES}-image as base-image

FROM koichirok/docker-opnsense:image-builder as builder

ARG OPNSENSE_VERSION
ARG WITH_FASTEST_MIRROR="yes"
ENV IMAGE_PATH="/OPNsense-${OPNSENSE_VERSION}-nano-amd64.qcow2"

COPY --from=base-image /OPNsense-*-nano-amd64.qcow2 "${IMAGE_PATH}"

SHELL ["/bin/bash", "-eo", "pipefail", "-c"]
WORKDIR /tmp

COPY ./src /builder

# create sparse qcow2 image at /
RUN --security=insecure \
    . /builder/functions.bash \
    && qemu-system-x86_64 \
        -nodefaults -enable-kvm -daemonize -m 3072 -nographic \
        -pidfile qemu.pid \
        -chardev "pty,id=ptyS0,logfile=console.log" -serial "chardev:ptyS0" \
        -netdev "user,id=nd0" -device "virtio-net-pci,netdev=nd0" \
        -netdev "user,id=nd1" -device "virtio-net-pci,netdev=nd1" \
        -drive "file=${IMAGE_PATH},format=qcow2,cache=none" \
        2>&1 | tee qemu.log \
    && serial=$(grep ptyS0 qemu.log | grep -o '/dev/pts/[0-9]*') \
    && pid=$(cat qemu.pid) \
    && echo -n "Perfoming update..." \
    && if [ "$WITH_FASTEST_MIRROR" = yes ]; then mirror="$(select_fastest_mirror)"; else mirror=; fi \
    && /builder/perform-update.exp "$serial" "$mirror" \
    && version=$(grep -A 1 '# opnsense-version' console.log | tail -n 1 | tr -d '\r ') \
    && echo "done." \ 
    && if [ "${version%_*}" != "${OPNSENSE_VERSION}" ]; then \
        echo "Error: Update failed. Expected version: '${OPNSENSE_VERSION}', Actual version: '${version}'"; \
        exit 1; \
    fi \
    && echo "OPNsense Version: ${version}" \
    && echo -n "Waiting for qemu ($pid) to exit..." \
    && if ! timeout 300 tail --pid=${pid} -f /dev/null; then \
        echo "failed. current processes: "; \
        ps alxww; \
        exit 1; \
    fi \
    && echo "done" \
    && echo -n "Generating sparse qcow2 image..." \
    && qemu-img convert -c -O qcow2 "${IMAGE_PATH}" sparse.qcow2 \
    && mv sparse.qcow2 "${IMAGE_PATH}" \
    && echo "done" \
    && rm -f ./*.log

FROM scratch

ARG OPNSENSE_VERSION

COPY --from=builder /OPNsense-${OPNSENSE_VERSION}-nano-amd64.qcow2 /
